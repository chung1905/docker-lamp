#!/usr/bin/env bash

# Function to generate docker-compose.yml content
generate_docker_compose() {
    # Load environment variables from dclamp.env file
    if [ -f "$config_file" ]; then
        # shellcheck source=dclamp.env
        . "$config_file"
    fi

    # Function to append service configurations
    append_service() {
        cat <<EOL

  $1:
    extends:
      <<: *file-extends
      service: $1
EOL
    }

    # Initialize docker-compose.yml content with a note
    docker_compose_content=$(cat <<EOL
# This file is generated automatically via dclamp script.
# Do not modify manually.
x-file-extends: &file-extends
  file: compose-declaration.yml

services:
EOL
)

    # Include activated services
    for service in $ACTIVATED_SERVICES; do
        docker_compose_content="$docker_compose_content$(append_service "$service")"
    done

    # Include PHP versions if specified
    for php_version in $PHP_VERSIONS; do
        docker_compose_content="$docker_compose_content
  php${php_version//./}:
    extends:
      <<: *file-extends
      service: php
    build:
      args:
        PHP_VER: $php_version"
    done

    # Initialize volumes content
    volumes_content=""

    # Include volumes if Elasticsearch or OpenSearch is activated
    if [[ " $ACTIVATED_SERVICES " = *" elasticsearch "* || " $ACTIVATED_SERVICES " = *" opensearch "* ]]; then
        volumes_content="
volumes:"
    fi

    # Include Elasticsearch volume if activated
    if [[ " $ACTIVATED_SERVICES " = *" elasticsearch "* ]]; then
        volumes_content="$volumes_content
  elasticsearch_data:"
    fi

    # Include OpenSearch volume if activated
    if [[ " $ACTIVATED_SERVICES " = *" opensearch "* ]]; then
        volumes_content="$volumes_content
  opensearch_data:"
    fi

    # Append volumes content to docker-compose content
    docker_compose_content="$docker_compose_content$volumes_content"

    printf "%s\n" "$docker_compose_content"
}

# Function to print usage information
print_usage() {
    echo "Usage: dclamp <action> [options]"
    echo "Actions:"
    echo "  generate          Generate docker-compose.yml content"
    echo "    --print/-p       Print to stdout"
    echo "    --file/-f <filename>    Write to specified file (default: docker-compose.yml)"
    echo "    --config/-c <filename>   Use specified .env file (default: dclamp.env)"
    echo "  config            Display brief configuration documentation"
}

# Function to display brief configuration documentation
config_documentation() {
    echo "Configuration File: dclamp.env"
    echo "  - Define PHP versions: PHP_VERSIONS='8.1 7.4'"
    echo "  - Define activated services: ACTIVATED_SERVICES='httpd mariadb opensearch'"
}

# Default values for options
print_mode="file"
filename="docker-compose.yml"
config_file="dclamp.env"

# Parse command line arguments
action="$1"
shift

case "$action" in
    "generate")
        while [ $# -gt 0 ]; do
            case "$1" in
                --print|-p)
                    print_mode="print"
                    shift
                    ;;
                --file|-f)
                    print_mode="file"
                    filename="$2"
                    shift 2
                    ;;
                --config|-c)
                    config_file="$2"
                    shift 2
                    ;;
                *)
                    echo "Invalid option: $1"
                    print_usage
                    exit 1
                    ;;
            esac
        done

        if [ "$print_mode" = "print" ]; then
            generate_docker_compose
        elif [ "$print_mode" = "file" ]; then
            generate_docker_compose > "$filename"
            echo "Generated docker-compose.yml content written to $filename"
        fi
        ;;
    "config")
        config_documentation
        ;;
    *)
        echo "Invalid action: $action"
        print_usage
        exit 1
        ;;
esac
