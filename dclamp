#!/usr/bin/env bash

# Function to generate docker-compose.yml content
generate_docker_compose() {
    # Load environment variables from dclamp.env file
    if [ -f "$config_file" ]; then
        # shellcheck source=dclamp.env
        . "$config_file"
    fi

    # Function to append service configurations
    append_service() {
        cat <<EOL

  $1:
    extends:
      <<: *file-extends
      service: $1
EOL
    }

    # Initialize docker-compose.yml content with a note
    docker_compose_content=$(cat <<EOL
# This file is generated automatically via dclamp script.
# Do not modify manually.
x-file-extends: &file-extends
  file: compose-declaration.yml

services:
EOL
)

    # Include activated services
    for service in $ACTIVATED_SERVICES; do
        docker_compose_content="$docker_compose_content$(append_service "$service")"
    done

    # Include PHP versions if specified
    for php_version in $PHP_VERSIONS; do
        docker_compose_content="$docker_compose_content
  php${php_version//./}:
    extends:
      <<: *file-extends
      service: php
    build:
      args:
        PHP_VER: $php_version"
    done

    # Initialize volumes content
    volumes_content=""

    # Include volumes if Elasticsearch or OpenSearch is activated
    if [[ " $ACTIVATED_SERVICES " = *" elasticsearch "* || " $ACTIVATED_SERVICES " = *" opensearch "* ]]; then
        volumes_content="

volumes:"
    fi

    # Include Elasticsearch volume if activated
    if [[ " $ACTIVATED_SERVICES " = *" elasticsearch "* ]]; then
        volumes_content="$volumes_content
  elasticsearch_data:"
    fi

    # Include OpenSearch volume if activated
    if [[ " $ACTIVATED_SERVICES " = *" opensearch "* ]]; then
        volumes_content="$volumes_content
  opensearch_data:"
    fi

    # Append volumes content to docker-compose content
    docker_compose_content="$docker_compose_content$volumes_content"

    printf "%s\n" "$docker_compose_content"
}

# Function to print usage information
print_usage() {
    echo "Usage: dclamp <action> [options]"
    echo "Actions:"
    echo "  generate          Generate docker-compose.yml content"
    echo "    --print/-p       Print to stdout"
    echo "    --file/-f <filename>    Write to specified file (default: docker-compose.yml)"
    echo "    --config/-c <filename>   Use specified .env file (default: dclamp.env)"
    echo "  config            Setup configuration"
    echo "  help              Display this usage information"
}

# Function to display available services
display_available_services() {
    echo "Available services:"
    services_section=$(awk '/^services:$/,/^$/ {print}' compose-declaration.yml)
    echo "$services_section" | awk '/^[[:space:]]{2}[a-zA-Z0-9_-]+:/ && !/php:/ {gsub(/:/,"",$1); print "  " $1}'
}

# Default values for options
filename="docker-compose.yml"
config_file="dclamp.env"

# Default values for configuration setup
default_php_versions="7.4 8.1"
default_activated_services="httpd mariadb opensearch"

# Parse command line arguments
action="$1"
shift

if [ -z "$action" ]; then
    if [ ! -f "dclamp.env" ]; then
        echo "dclamp.env file not found. Running config and generate actions automatically."
        action="config"
        generate="yes"
    else
        echo "No action provided. Displaying help."
        print_usage
        exit 0
    fi
fi

case "$action" in
    "generate")
        print_mode="file"
        while [ $# -gt 0 ]; do
            case "$1" in
                --print|-p)
                    print_mode="print"
                    shift
                    ;;
                --file|-f)
                    print_mode="file"
                    filename="$2"
                    shift 2
                    ;;
                --config|-c)
                    config_file="$2"
                    shift 2
                    ;;
                *)
                    echo "Invalid option: $1"
                    print_usage
                    exit 1
                    ;;
            esac
        done

        if [ "$print_mode" = "print" ]; then
            generate_docker_compose
        elif [ "$print_mode" = "file" ]; then
            generate_docker_compose > "$filename"
            echo "Generated docker-compose.yml content written to $filename"
        fi
        ;;
    "config")
        echo "Configuration Setup:"

        # Prompt for PHP versions with default value
        read -rp "Define PHP versions (default: $default_php_versions): " php_versions
        php_versions=${php_versions:-$default_php_versions}

        # Display available services
        display_available_services

        # Prompt for activated services with default value
        read -rp "Define activated services (default: $default_activated_services): " activated_services
        activated_services=${activated_services:-$default_activated_services}

        # Writing configurations to file
        echo "PHP_VERSIONS='$php_versions'" > "$config_file"
        echo "ACTIVATED_SERVICES='$activated_services'" >> "$config_file"

        if [ ! -e ".env" ]; then
            echo "Notice: .env file does not exist. Creating .env file."
            echo "UID=$UID" > .env
        fi

        echo "Configurations written to $config_file"

        # Generate docker-compose.yml if flagged
        if [ "$generate" = "yes" ]; then
            generate_docker_compose > "docker-compose.yml"
            echo "Generated docker-compose.yml content written to docker-compose.yml"
        else
            echo "To generate docker-compose.yml, run: ./dclamp generate"
        fi
        ;;
    "help")
        print_usage
        ;;
    *)
        echo "Invalid action: $action"
        print_usage
        exit 1
        ;;
esac
